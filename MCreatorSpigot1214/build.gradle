import groovy.json.JsonSlurper

plugins {
    id 'java'
}

group = 'org.cdc.spigotgen'
version = new JsonSlurper().parse(file('src/main/resources/plugin.json'))['info']['version']

var rundata = tasks.register("runDataGen",JavaExec){
    group = "build"
    mainClass = "org.cdc.spigotgen.datagent.Datagen"
    classpath = project(":MCreatorSpigot1214").sourceSets.main.runtimeClasspath
}

repositories {
    mavenCentral()
    maven { url "https://repo.gradle.org/gradle/libs-releases" } // for gradle-tooling-api
    flatDir { dirs mcreator_path + '/lib' }
}

configurations {
    implementation.extendsFrom export
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation project(':MCreator')

    project(":MCreator").configurations.named("implementation").get().dependencies.each {
        //noinspection ForeignDelegate
        implementation it
    }

    implementation project(':FountainBase')
}

tasks.jar {
    dependsOn(rundata.get())

    archiveFileName.set("spigot-1.21.4.zip")

    from {
        configurations.export.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register('runMCreatorWithPlugin', JavaExec) {
    dependsOn jar

    environment("MCREATOR_PLUGINS_FOLDER", file("./build/libs"))
    environment("MCREATOR_PLUGINS_DEV", "")

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    classpath = project(':MCreator').sourceSets.main.runtimeClasspath

    main = 'net.mcreator.Launcher'

    workingDir = mcreator_path
}

subprojects { subproject ->
    subproject.plugins.withType(JavaPlugin) {
        test {
            dependsOn rootProject.jar

            environment("MCREATOR_PLUGINS_FOLDER", new File(rootProject.projectDir, "/build/libs"))
            environment("MCREATOR_PLUGINS_DEV", "")

            workingDir = mcreator_path
        }
    }
}

test {
    useJUnitPlatform()
}