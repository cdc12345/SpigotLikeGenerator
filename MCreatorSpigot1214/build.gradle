plugins {
    id 'java'
    id "de.undercouch.download" version "5.6.0"
}

group = 'org.cdc.spigotgen'
version = "1.0"

String generatorName = "spigot-1.21.4"

var rundata = tasks.register("runDataGen", JavaExec) {
    group = "build"
    mainClass = "org.cdc.spigotgen.datagent.Datagen"
    classpath = project(":MCreatorSpigot1214").sourceSets.main.runtimeClasspath
}

tasks.register("downloadClient", Download) {
    src 'https://piston-data.mojang.com/v1/objects/a7e5a6024bfd3cd614625aa05629adf760020304/client.jar'
    dest layout.buildDirectory
    overwrite true
    group "build"
}

repositories {
    mavenCentral()
    maven { url "https://repo.gradle.org/gradle/libs-releases" } // for gradle-tooling-api
    flatDir { dirs mcreator_path + '/lib' }
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

configurations {
    implementation.extendsFrom export
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation project(':MCreator')

    project(":MCreator").configurations.named("implementation").get().dependencies.each {
        //noinspection ForeignDelegate
        implementation it
    }

    implementation project(':FountainBase')

    //GeneratedLibrary
    implementation("org.spigotmc:spigot-api:1.21.4-R0.1-SNAPSHOT")
}

tasks.jar {
    dependsOn(rundata.get())

    archiveFileName.set("spigot-1.21.4.zip")

    from {
        configurations.export.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register('runMCreatorWithPlugin', JavaExec) {
    dependsOn jar

    environment("MCREATOR_PLUGINS_FOLDER", file("./build/libs"))
    environment("MCREATOR_PLUGINS_DEV", "")

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    classpath = project(':MCreator').sourceSets.main.runtimeClasspath

    main = 'net.mcreator.Launcher'

    workingDir = mcreator_path
}

subprojects { subproject ->
    subproject.plugins.withType(JavaPlugin) {
        test {
            dependsOn rootProject.jar

            environment("MCREATOR_PLUGINS_FOLDER", new File(rootProject.projectDir, "/build/libs"))
            environment("MCREATOR_PLUGINS_DEV", "")

            workingDir = mcreator_path
        }
    }
}

test {
    useJUnitPlatform()
}

tasks.processResources {
    doLast {
        var resource = layout.buildDirectory.file("resources/main/" + generatorName + "/procedures")
        resource.get().asFile.listFiles().toList().each {
            if (it.isDirectory() && it.getName() != "utils") {
                var file = it
                copy {
                    from fileTree(file)
                    into resource
                }
                fileTree(file).each {
                    it.delete()
                }
                file.delete()
            }
        }
    }
}